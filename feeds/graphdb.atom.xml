<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>andy's blog</title><link href="/" rel="alternate"></link><link href="/feeds/graphdb.atom.xml" rel="self"></link><id>/</id><updated>2016-01-28T00:00:00+08:00</updated><entry><title>图形数据库-2</title><link href="/tu-xing-shu-ju-ku-2.html" rel="alternate"></link><updated>2016-01-28T00:00:00+08:00</updated><author><name>andy.zhangtao</name></author><id>tag:,2016-01-28:tu-xing-shu-ju-ku-2.html</id><summary type="html">&lt;h1&gt;图形数据库(GraphDB)2 - Graph和RDBMS的区别&lt;/h1&gt;
&lt;p&gt;&lt;br/&gt;
如果您对此文章感兴趣或者有其它不同观点，欢迎发邮件至&lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#110;&amp;#100;&amp;#121;&amp;#46;&amp;#122;&amp;#104;&amp;#97;&amp;#110;&amp;#103;&amp;#116;&amp;#97;&amp;#111;&amp;#64;&amp;#104;&amp;#111;&amp;#116;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#97;&amp;#110;&amp;#100;&amp;#121;&amp;#46;&amp;#122;&amp;#104;&amp;#97;&amp;#110;&amp;#103;&amp;#116;&amp;#97;&amp;#111;&amp;#64;&amp;#104;&amp;#111;&amp;#116;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
本文主要记录了目前使用最多的GraphDB-neo4j和RDBMS的区别。同时附带介绍了如何将数据从RDBMS当中迁移到Neo4j中。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
RDBMS数据库自从上个世纪80年代开始出现并且一直演进到现在，占据了数据库大多数市场份额。RDBMS强调数据是结构化的，并且通过列来表示数据的各项属性，同时用行来聚合具有相同属性的数据。而这种以结构化数据为核心的理念，非常适合计算机进行解析处理。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
在RDBMS当中，如果需要关联不同的数据，那么只能通过主外健的方式进行。换言之，有主外健最好，如果没有主外键，那么就需要额外再创建主外健关系。这样做有利有弊，有利的一方面是不会破坏数据的结构性。而弊端则是引入主外键后，会大大增加不同数据之间的模型复杂度。而增加的模型复杂度又会导致需要加大计算代码，所以对于RDBMS来说，如何优化SQL语句就是一项长期而艰巨的任务。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://lh3.googleusercontent.com/M3m83HOldFJ2rkAAoQ18cP3iyM72JxZftfUOdRyhQFzKUFZfAgPu6Fr12iL3gL9Zxwn9C0oKsD84UtWf0d6WgfXFeL1E8ueLzeEo-sC677KR49HtmpwE5gaeM0Vog8Hdxy2hqlhhGOrmBVfaC7acpjFY1LwsO0LN6nFeU65-aiCPdwF_XM1Vv0pYXSt-dysP0M1GfIhcBnzFK4EVewaCwuuUFgJS8pUxrmOCR1QyVy88FKbVC5hTJweB1e4jIagSKrHarmDbT7q4d11FXkQm23p5MdyfQx-BJ0-IcK8FL6TrK6IENVu-gEqr9GdeeeKOPVsgEbMoUXlYP1Yd7dc5VBrJLxkVoqSx6V8qxog4B35QS_3wfax1O9xNCKtiWsklOUbgbRc2LHHB28ZfRH48qXs4VsvMvfGpAmeW6eqJqZYhEk67CcSzl8EQgqhc_8V1NpMQ0f8MZhRBHtG2N8LCvFQieX7ALMW82k39OiVTPJb6-6qco2AAko6zGI2X2THjdimMoguilGzJZnEXe68DyFJNFNY6KicZi6DW9XivpZKGcY-M0mJzzZVkfxmBUHHBMeI=w1192-h632-no" /&gt;
&lt;br/&gt;
上图是一对多的情况，这种场景相对而言还容易处理。如果遇到多对多的时候怎么办呢？ 传统的做法就是将多对多的模型转化为1对多的模型，如果无法转化。那么就需要再引入一张表来单独存储多对多的关联关系。 而引入这些表之后，势必将会加大SQL语句复杂度，增大计算开销。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
尽管，目前已经有很多优化SQL的解决方案，也有很多可以简化数据模型的解决方案。但不可否认的是，因为RDBMS对于结构化数据至上的核心理念，导致在很多应用场景下，在处理这些复杂数据模型时，除了业务层面做出妥协，RDBMS没有其它好的方案。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;从RDBMS转移到GraphDB&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;
在GraphDB当中，关系是“一等公民”。GraphDB和RDBMS最大的区别就是，GraphDB不需要通过主外键，不需要强连接来表示两个实体之间的联系。GraphDB只需要将不同实体之间的关系抽象成节点之间的连接，就可以完成RDBMS当中的复杂计算。而这一点将会使用户有能力在GraphDB当中重建一个现实社会关系.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
也有观点认为，GraphDB有可能会演变为下一代的RDBMS，但在下一代的RDBMS当中，关系会取代结构化数据变为一等公民。传统RDBMS当中的主外键将会成为历史。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
在GraphDB当中，每个node都会天生拥有一些指向其它node的关系(在上一篇当中，我们提到Graph不允许存在死链，所以也就不会允许存在单独node)。这些关系通过其类型和其方向来维护，并且每个关系又可以拥有多个属性。通过这样的模型，就可以解释RDBMS当中的1对多和多对多模型。例如下图中，用户需要检索Alice的数据，那么通过Alice的关系就可以明确出检索方向，减少不必要的索引开销和计算开销。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
而这种图论模型，在海量数据场景下会体现出巨大的计算优势。在同等海量数据下，GraphDB的检索效率就可以达到秒级。而RDBMS则有可能是分钟级(仅仅是理论数据，具体情况则依赖于具体业务场景和数据量)。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="image" src="https://lh3.googleusercontent.com/yhawaQ7_SYeuJzIP8GXCthecgw6TZVObg7nrLF3KDSJylh7f_deb_g5MM6hub2reRrHlFqi-hrX5rug_0FCPaj3UisP0dnAXvq7iUSN_qi4xjoS1vORM50JkC7O4VFN_OgDh3PJ6BjBi8oARY9jrSTAMeChQ9rbhrcOCZkpQ3n8pCc7E3Mtf-h4N9z-72sbKK6xWQeNLJkk0EPIKjFuc_N0FodFw98-aFx7K5aaFPXOpKy0ZHc_UEU4a_OHG9oDs95npmlt19of_6zcJxS7razfmQgFH0-Cd9QHJW1kHLRylZfTA7TJyuRdh4qudR6skHw815VNqZQiURo5fvfSpDdbn97Kq3Ad7Rml5H6XwzI6VvaurXKYwWlSJrwIEVYBDkyIOrqTAGxDeV0Ixo2KsXdfsnSPx8Fn9sE0cCS70KPF70Sbv7hgbBQmu00Ohv0jBnRnqaP28s2R-zrev40hNni5iXaniHAnqbNcD1pdTstFXHnhVSsTh8WC5_uDhdqVj7dwRwvEe37h-pDD305SWnPO7Su4SV2qrSxILWgEYM41HlHcOsuguQMKdPrC5O5L5VZs=w493-h170-no" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
GraphDB只关心"关系"，因此不关心数据模型的颗粒度和复杂度。因此用户在使用GraphDB时就可以仿照真实世界中实体特点(小而多，个性化并且关联关系复杂)来构建数据模型。这样用户通过GraphDB就可以尽可能反映真实世界的情况。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
当我们将模型控制为细粒度时就会发现：这些模型会丧失明显的模型边界。但对于这样无明显边界的模型，GraphDB也会保证满足ACID原则。而且Neo4j也会通过日志机制和回滚机制，来保障数据一致性。简而言之，Neo4j会绝对保证提交到数据库中的数据不会丢失。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
如果用户已经熟悉了对RDBMS的使用，那么转化为使用GraphDB也不是什么难事。使用GraphDB可以从实体图开始，通过如下所示的实体图可以让所有人将精力聚焦于业务模型本事，而不用在考虑如何设计主外键。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="image" src="https://lh3.googleusercontent.com/xUyhY-AcTYj8na-n64Cgs7lsmuQuynnB6E9NlFsyexBNG9kLDXK_mpPf2FsVR5f5cMz-61QEy85QdtuLtYOGahQoSMcU1-jfVZAl2_aO2gOxWNKyhuq5K6c4VvyyHoPjerQunT64o_Gy81_WgbIqK9RmhKJ1t_3nE9Ai175khxL0yExitKvIHM_u1B7YzUamyDDvi2ZavmBTGQxXjhgBTZV77hM942_6vfv5juWxx4qmnfh6mL0Iq5QAnXESz8-Ogp19OmBHHD2XjjqyTfUaqvzjm1TRbR91Q9O-5jQiAj_k6p1_tRAr7bS5ZflOIQgXR3u8oOGJIIyKZPcQNQr3X3JuARTieDx8dol4XCxskvjAi_hx4L9aJVveg-cztAOiw7735gF2eYR3RouMr9NZg7M_QdSRGT8nXFjGtV-gYZN9HcD5JGY_fcy_RCvuqnPOmaFQzHVKTXoKgoVaPEtS4aSkrm42sqKzmwpgw9vrDVVAqLpD0Rnd8HW44kNibMQUE9H6CJ78HGivwbUydTdR3wD7tLH-h8VLu9UJA7C6as5d2eYSbEhURXbkJR5O_U0ur8k=w1207-h837-no" /&gt;
&lt;br/&gt;
为什么这么说呢？请看下图，下图同时展现了在RDBMS和GraphDB中如何来设计数据模型的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="image" src="https://lh3.googleusercontent.com/_mQq6eg3ObVmgOfIH-Sg27jA6FOe2HS1Y_ZAqvI3vOIsRNI3W4J7rquGJyakcu315sOzlODyDLHe93yPLf_IA9w2eIb_aHyGViFZpQJFdOaPZbbHiVJJ1Dh5ZpHfaFTw5tKTmlYwGcqyFH3T9KYsR8xn2pgZxWASNe-nZ4SNXuDnKrBvxajgAdEA8CLlu3tqVzTTHREo50c1mvd4Nbg9jzDsxVZH0NONoca3hPiPJOIqEKHhmBhSk9PoA4LTefu7DNUu2HrAYCnislXYLiN1sB1l4rl337w8aDh43DfwCB78kXuHSRwPUtvE5FkGjwAsKz0uE1gcAWnNY0R8LSxmbh6mpOgzznt1RH3erUjY5TOZknpxcxrrQYUUcWYPG0i-ePIZoCxdNU83bCd-PH821-iIvlvGC5Rhi-MeVCq56xPl_JXmGqBZPOgPbdyGGeUkFs_3rhOMJvHwCRWQrHwOLi8B-b34vBYeMz7OTsz7Y1ef8XgvdmOebjzSa9FS5-tccoxpNsFRIFcUEHgrQzhOXcB6XFqyhEPGgoRlfdVfRQzRSOfgTkRIvfQMKrH6Vo8WNgM=w1502-h650-no" /&gt;
&lt;img alt="image" src="https://lh3.googleusercontent.com/HbJAPanjbCuZm4TR1NXxbRrixuBb1_zyTbYOq4zUgiegIyA19LVy6lHoq7lJM1sv-X-jimZ53nbZtLSh_JkvTOzvcSwvtvjAJJcuParaXctFL8A9nfoGQYSvRENiIaEGHbFwBxOm8fwTH_X775GnduORJcRqbkTX3QYV2II7p1A3UfpDDaiNZbxB193gsaKh83tQLESI4o8dTtMqspGZTdEEfLQtk81Tnt-VV5lzqU_By_SPNnrHO4kx0rQdVN3B4W8GOK58WlQDHLq7LHsq9T1fQ6gdgZTpBb1L7BKALzbekeK7l9cagDRzM7v6BTutL5Fd6PPXaUKVtj_rqWBc25fc9Z3MMdOlgIOoq5OH_KwYM9aA0PGy_YkYUYQUumRkHKwoo5GkuBai0GfW8W9bqfHXOlDidBMvZiHfeq2oZNQ8OjDJLVxvoTYj1itATxu4wGgawtKnWiSC3PyKqxAJ_uyFVgg08o-maNoRYy36tL-woXSyJLFGyXwZV3oNMJ_hTh4gIPKHW5-WDjfhXYB2ifGXFqd2AePR-dbAeEEW-Dc1wOYtWzi1WzV6Va42fhni2sU=w1497-h887-no" /&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;通过这两张图可以看到，在GraphDB中设计模型比在RDBMS中设计模型要简单。&lt;/p&gt;</summary></entry><entry><title>图形数据库-1</title><link href="/tu-xing-shu-ju-ku-1.html" rel="alternate"></link><updated>2016-01-27T00:00:00+08:00</updated><author><name>andy.zhangtao</name></author><id>tag:,2016-01-27:tu-xing-shu-ju-ku-1.html</id><summary type="html">&lt;h1&gt;图形数据库(GraphDB)&lt;/h1&gt;
&lt;p&gt;&lt;br/&gt;
如果您对此文章感兴趣，欢迎发邮件至&lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#110;&amp;#100;&amp;#121;&amp;#46;&amp;#122;&amp;#104;&amp;#97;&amp;#110;&amp;#103;&amp;#116;&amp;#97;&amp;#111;&amp;#64;&amp;#104;&amp;#111;&amp;#116;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#97;&amp;#110;&amp;#100;&amp;#121;&amp;#46;&amp;#122;&amp;#104;&amp;#97;&amp;#110;&amp;#103;&amp;#116;&amp;#97;&amp;#111;&amp;#64;&amp;#104;&amp;#111;&amp;#116;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;何谓图形数据库&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;
在我们生存的实际世界当中，到处都存在着"关系"。世界当中没有独立存在的事物，在我们身边充斥着大量的，相互交织的各种关系。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
如果需要处理这些相互交织的关系数据，凭借关系型数据库是无法完成的。此时，就需要一种以关系为核心，并且可以高效存储，高效处理的数据库。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
相对于图形数据库而言，关系型数据库虽然也可以计算这些"关系"数据，但计算的代价却是异常昂贵。得益于图形数据库天生以"关系"为核心，因此其在检索关系数据时非常高效，目前可以支持每颗CPU每秒处理百万次关系检索，效率比RDBMS高出好几个数量级。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
那图形数据库会替代RDBMS吗？首先来说，两者适用场景不同。图形数据库更加侧重于处理海量数据下的，高度链接的关系拓扑关系和复杂的查询需求，而这些恰恰不是RDBMS的强项。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="image" src="https://lh3.googleusercontent.com/s8jMKkYD6xAtGxvN57IAm2yQl-DXX7U_-7iZ3WC20UQXRQFAblm_hDZsRuuxkRmqYdis4ywTXSM--zBITBTbxatf3xpXaPAC_vs_pvkQIxybJpccpXuoTihLd8qNDNNNcV8hXYvUjWYPsJB5F1c12O2h-AEKpybswKAfAj7BDZwmquwq-Sqkrjb_YbvCLyv4LHa2l1olv4gnpDShws3TjNSQFbZPG_trsRxz25d0z47Mk6PRuI-C8O0M6T9sr7G6wgJ0qyFiU9D6RSIlEjPMUi_gtX4UWA7_EjEP0C5dHtjDGP_FsgVuylG83a5ISDWCuGOktxRaaC1XaJQus6ySdCxjXZAcQt1IbaCLTYju5EN5r6tUZR4pNL7KikOWlk8p1kYF9AbnZdQKdfIHMsPam3_eLPo9V5UA15I-rvEDFqEl66vAyusoRknl7qGjOA3wrw1Oro9Lv1aq9acsWaIVAo0p_JHSKAO8-8ui6FDplAu_MjssTlxqRn10HWwFOEpr9S5OdvFfH3i_7JhMH6PO-zNjuaipr0lYBOcCobHCkUeLhs6i8x2Sci8a7gh4sHVApRk=w283-h323-no" /&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;图形数据库使用的数据模型&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;
如果读者接触过对象模型或者实体图，那么想必对下面的模型必然不陌生。在图形数据库模型中，一个实体称之为一个节点(node)，每个node都有非常多的属性，这些属性通过key-value来表示。相同的node在不同的场景当中可以拥有不同的标签信息(lable)。而这些Lable信息，除了可以用来标记node之外，也可以用来附加一些metadata(例如索引信息或者约束信息等).&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="image" src="https://lh3.googleusercontent.com/YOI-JTUEhROm2H5tnjbuvd_eGuYcnNn1byjlsfu4UpkQZP1TJAkEZbUA_vgDEW_XiapmWFJe1IgLMiCLGit1W2EEJo_CoANCybOK78qGoI7zsT9QNKDtiOMLD1-VEp2irRJxsVGnvt6cGKG0uCc2rpK6njgJxeYUSoG5rLt2NWo1giNp4yXFPMR6FN8L9f2-63cx4WfbyQ7JkxX5Gb8YNMD0jXGKTe0FJtQsvwqlqcQKJ2xOYmZ7HfY-6DAZ8Q3O3aEneIbStOEK_-tB0Bjr86n3gfhGbiign49icpIuBRKC3GH6hrl4BJwjKfrSvfsS5dIA1RjbxJF19sf6c3j6h3zV62ragk_-Q21BSMjfeCA-NcHqaT-IBWNx_OfUAbd_Md2LcxI3wRTuEv9zFck_Ie4xZUqyx0-VUaUC8HGjzG8v1oG7ZR2ufz982s9S4GcDffVmMyvRaRSB2H0MemWrd55DzjZ-wQNJUaiT2hdHOtPzXCMh_LgWGBruVgAJXbFic0fIRA-QC-kqg1IhtNwKJeoduEEE-thnlFKi_oi0AymGiqVp-op6EDl9HKhIFiizjQk=w730-h475-no" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
而在两个节点之间，有向并且语义清楚的连接就称之为关系。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
通常来说，一个关系包括方向，类型，起点node和结束node四个要素。而对于node来说，一个关系则可以同时拥有多个属性。例如权重，代价，距离，级别，新鲜度或者优势度等等。因为在图形数据库当中，维护一条关系是一个代价非常小的事情，所以两个节点之间可以在不带来额外性能损失的情况下，拥有无限条的关系或者属性。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
但有一点需要注意，尽管关系是有向的，但关系本身却不关心方向。只有node才会关心方向。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
虽然关系很便宜，但在图形数据库当中却有一条铁的纪律:"不允许存在死链"。因为每条关系都必须存在起始node和结束node，所以用户无法在删除所有关系之前删除掉与之相关联的node。用户可以认为，一条存在的关系必然会连接两个存在的node。&lt;/p&gt;</summary></entry></feed>