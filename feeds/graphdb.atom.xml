<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>andy's blog</title><link href="/" rel="alternate"></link><link href="/feeds/graphdb.atom.xml" rel="self"></link><id>/</id><updated>2016-01-27T00:00:00+08:00</updated><entry><title>图形数据库-1</title><link href="/tu-xing-shu-ju-ku-1.html" rel="alternate"></link><updated>2016-01-27T00:00:00+08:00</updated><author><name>andy.zhangtao</name></author><id>tag:,2016-01-27:tu-xing-shu-ju-ku-1.html</id><summary type="html">&lt;h1&gt;图形数据库(GraphDB)&lt;/h1&gt;
&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;何谓图形数据库&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;
在我们生存的实际世界当中，到处都存在着"关系"。世界当中没有独立存在的事物，在我们身边充斥着大量的，相互交织的各种关系。
&lt;br/&gt;
如果需要处理这些相互交织的关系数据，凭借关系型数据库是无法完成的。此时，就需要一种以关系为核心，并且可以高效存储，高效处理的数据库。
&lt;br/&gt;
相对于图形数据库而言，关系型数据库虽然也可以计算这些"关系"数据，但计算的代价却是异常昂贵。得益于图形数据库天生以"关系"为核心，因此其在检索关系数据时非常高效，目前可以支持每颗CPU每秒处理百万次关系检索，效率比RDBMS高出好几个数量级。
&lt;br/&gt;
那图形数据库会替代RDBMS吗？首先来说，两者适用场景不同。图形数据库更加侧重于处理海量数据下的，高度链接的关系拓扑关系和复杂的查询需求，而这些恰恰不是RDBMS的强项。
&lt;br/&gt;
&lt;img alt="image" src="https://goo.gl/photos/9f5Un5smf4kanEgL8" /&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;图形数据库使用的数据模型&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;
如果读者接触过对象模型或者实体图，那么想必对下面的模型必然不陌生。在图形数据库模型中，一个实体称之为一个节点(node)，每个node都有非常多的属性，这些属性通过key-value来表示。相同的node在不同的场景当中可以拥有不同的标签信息(lable)。而这些Lable信息，除了可以用来标记node之外，也可以用来附加一些metadata(例如索引信息或者约束信息等).
&lt;br/&gt;
&lt;img alt="image" src="https://goo.gl/photos/wxipk9tB8B3Tw45Z6" /&gt;
&lt;br/&gt;
而在两个节点之间，有向并且语义清楚的连接就称之为关系。
&lt;br/&gt;
通常来说，一个关系包括方向，类型，起点node和结束node四个要素。而对于node来说，一个关系则可以同时拥有多个属性。例如权重，代价，距离，级别，新鲜度或者优势度等等。因为在图形数据库当中，维护一条关系是一个代价非常小的事情，所以两个节点之间可以在不带来额外性能损失的情况下，拥有无限条的关系或者属性。
&lt;br/&gt;
但有一点需要注意，尽管关系是有向的，但关系本身却不关心方向。只有node才会关心方向。
&lt;br/&gt;
虽然关系很便宜，但在图形数据库当中却有一条铁的纪律:"不允许存在死链"。因为每条关系都必须存在起始node和结束node，所以用户无法在删除所有关系之前删除掉与之相关联的node。用户可以认为，一条存在的关系必然会连接两个存在的node。&lt;/p&gt;</summary></entry></feed>