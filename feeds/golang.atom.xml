<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>andy's blog</title><link href="/" rel="alternate"></link><link href="/feeds/golang.atom.xml" rel="self"></link><id>/</id><updated>2016-01-19T00:00:00+08:00</updated><entry><title>如何跨平台编译Golang</title><link href="/ru-he-kua-ping-tai-bian-yi-golang.html" rel="alternate"></link><updated>2016-01-19T00:00:00+08:00</updated><author><name>andy.zhangtao</name></author><id>tag:,2016-01-19:ru-he-kua-ping-tai-bian-yi-golang.html</id><summary type="html">&lt;h1&gt;如何跨平台编译Golang程序&lt;/h1&gt;
&lt;p&gt;跨平台编译Golang程序的方法有很多种，下面仅介绍基于Docker的编译方式。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;我们假设当前golang版本为1.4&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;build&lt;/h2&gt;
&lt;p&gt;需要Pull的image如下：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;em&gt; golang:1.4
&lt;/em&gt; golang:1.4.3-cross
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;为什么需要两个image呢？这是golang:1.4.3-cross经常出现pull failed的情况，可能是人品问题吧.... 所以我们需要基于golang:1.4来build golang:1.4.3-cross。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;下面是build golang：1.4.3-cross所使用的Dockerfile：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;FROM golang:1.4

ENV GOLANG_CROSSPLATFORMS \
    darwin/386 darwin/amd64 \
    dragonfly/386 dragonfly/amd64 \
    freebsd/386 freebsd/amd64 freebsd/arm \
    linux/386 linux/amd64 linux/arm \
    nacl/386 nacl/amd64p32 nacl/arm \
    netbsd/386 netbsd/amd64 netbsd/arm \
    openbsd/386 openbsd/amd64 \
    plan9/386 plan9/amd64 \
    solaris/amd64 \
    windows/386 windows/amd64

ENV GOARM 5

RUN cd /usr/src/go/src \
    &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; set -ex \
    &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; for platform in &lt;span class="nv"&gt;$GOLANG_CROSSPLATFORMS&lt;/span&gt;; do \
        GOOS=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;%/*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; \
        GOARCH=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="c"&gt;##*/&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; \
        ./make.bash --no-clean 2&amp;gt;&lt;span class="ni"&gt;&amp;amp;1;&lt;/span&gt; \
    done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过执行docker build -t golang:1.4.3-cross . 就可以build出一个可用的cross image。
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;如何使用&lt;/h2&gt;
&lt;p&gt;我们假设目前有已经写好的golang程序，目录名为：mygolang。那么执行下面的语句将mygolang的源码挂载到image中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;docker run --rm -it -v &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;:/usr/src/myapp -w /usr/src/myapp golang:1.4.3-cross bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在新创建的bash中，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; GOOS in darwin linux windows&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&amp;gt;   &lt;span class="k"&gt;for&lt;/span&gt; GOARCH in &lt;span class="m"&gt;386&lt;/span&gt; amd64&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&amp;gt;     go build -v -o myapp-&lt;span class="nv"&gt;$GOOS&lt;/span&gt;-&lt;span class="nv"&gt;$GOARCH&lt;/span&gt;
&amp;gt;   &lt;span class="k"&gt;done&lt;/span&gt;
&amp;gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;
这样就可以编译出三种平台32/64位共6个可执行程序。
&lt;br/&gt;
也可以通过下面方式只编译特定平台：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --rm -v &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:/usr/src/myapp -w /usr/src/myapp -e &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;windows -e &lt;span class="nv"&gt;GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;386&lt;/span&gt; golang:1.4.3-cross go build -v
&lt;/pre&gt;&lt;/div&gt;</summary></entry></feed>